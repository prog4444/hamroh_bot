# keyboard_driver = types.ReplyKeyboardMarkup(resize_keyboard=True)
# buttons = ["–í–æ–¥–∏—Ç–µ–ª—å"]
# buttons_client = ["–ü–∞—Å—Å–∞–∂–∏—Ä"] 
# keyboard_driver.add(*buttons, *buttons_client)
# await message.answer("–í—ã –ø–∞—Å—Å–∞–∂–∏—Ä –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å?", reply_markup=get_keyboard())

#    Datacode_one = {
#     't_user_id': message.from_user.id,
#     }

#     response2 = requests.post(f'{my_url}v1/telegram-bot/auth/check', data=Datacode_one)
#     answer2 = jsonpickle.decode(response2.text)
#     print(answer2)
#     if answer2['code'] == 401 or answer2['code'] == 404:
#         # await message.answer("–í–∞—à–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ωf! \n/register")
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ \n–ü—Ä–∏–º–µ—Ä: 992986660110")
#         await FCMAdmin_regis.next()
#     if answer2['code'] == 200:
#         keyboard_driver = types.ReplyKeyboardMarkup(resize_keyboard=True)
#         buttons = ["–í–æ–¥–∏—Ç–µ–ª—å"]
#         buttons_client = ["–ü–∞—Å—Å–∞–∂–∏—Ä"] 
#         keyboard_driver.add(*buttons, *buttons_client)
#         await message.answer("–í—ã –ø–∞—Å—Å–∞–∂–∏—Ä –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å?", reply_markup=get_keyboard())
#         await state.finish()








# import logging

# from aiogram import Bot, Dispatcher
# from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup
# from aiogram.utils import executor
# from aiogram.dispatcher.filters import Text
# from aiogram_calendar import simple_cal_callback, SimpleCalendar, dialog_cal_callback, DialogCalendar
# from create_bot import dp, bot

# from config import TOKEN

# # API_TOKEN = '' uncomment and insert your telegram bot API key here

# # Configure logging
# logging.basicConfig(level=logging.INFO)



# start_kb = ReplyKeyboardMarkup(resize_keyboard=True,)
# start_kb.row('Navigation Calendar', 'Dialog Calendar')


# # starting bot when user sends `/start` command, answering with inline calendar
# @dp.message_handler(commands=['start'])
# async def cmd_start(message: Message):
#     await message.reply('Pick a calendar', reply_markup=start_kb)


# @dp.message_handler(Text(equals=['Navigation Calendar'], ignore_case=True))
# async def nav_cal_handler(message: Message):
#     await message.answer("Please select a date: ", reply_markup=await SimpleCalendar().start_calendar())


# # simple calendar usage
# @dp.callback_query_handler(simple_cal_callback.filter())
# async def process_simple_calendar(callback_query: CallbackQuery, callback_data: dict):
#     selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
#     if selected:
#         await callback_query.message.answer(
#             f'You selected {date.strftime("%d/%m/%Y")}',
#             reply_markup=start_kb
#         )


# @dp.message_handler(Text(equals=['Dialog Calendar'], ignore_case=True))
# async def simple_cal_handler(message: Message):
#     await message.answer("Please select a date: ", reply_markup=await DialogCalendar().start_calendar())


# # dialog calendar usage
# @dp.callback_query_handler(dialog_cal_callback.filter())
# async def process_dialog_calendar(callback_query: CallbackQuery, callback_data: dict):
#     selected, date = await DialogCalendar().process_selection(callback_query, callback_data)
#     if selected:
#         await callback_query.message.answer(
#             f'You selected {date.strftime("%d/%m/%Y")}',
#             reply_markup=start_kb
#         )


# if __name__ == '__main__':
#     executor.start_polling(dp, skip_updates=True)


    # await bot.send_message(
    #     id_all,
    #     md.text(
    #         md.text('üïµüèº –Ø #–í–æ–¥–∏—Ç–µ–ª—å'),
    #         md.text('üè¢ –û—Ç–∫—É–¥–∞: #'+data['address_from']),
    #         md.text('üè† –ö—É–¥–∞: #'+data['address_to']),
    #         md.text('üìÖ –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: ', data['date_y']),
    #         md.text('üôãüèª‚Äç‚ôÇÔ∏è –ö–æ–ª—å-–≤–æ: ', data['mesto']),
    #         md.text('üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: ', data['sum_d']) + 'c–º–Ω',
    #         md.text('üöô  –ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å: ', data['marka']),
    #         md.text('üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ', data['phone']),
    #         md.text("@hamrohbot_bot"),
    #         sep='\n',
    #         ),
    #     # reply_markup=markup,
    #     # parse_mode=ParseMode.MARKDOWN
    # )
    # keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # buttons = ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"]
    # keyboard.add(*buttons) 
    # await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª @hamroh_gram, —Å–ø–∞—Å–∏–±–æ!", reply_markup=keyboard)
    # await state.finish() ‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫


# from config import TOKEN 
# from aiogram import Bot, Dispatcher, executor
# from aiogram.contrib.fsm_storage.memory import MemoryStorage
# from aiogram.dispatcher.filters.state import StatesGroup, State
# from aiogram.types import Message
# from create_bot import dp, bot


# from aiogram_dialog import Window, Dialog, DialogRegistry, DialogManager, StartMode
# from aiogram_dialog.widgets.kbd import Button
# from aiogram_dialog.widgets.text import Const




# class MySG(StatesGroup):
#     main = State()


# main_window = Window(
#     Const("Hello, unknown person"),
#     Button(Const("Useless button"), id="nothing"),
#     state=MySG.main,
# )
# dialog = Dialog(main_window)



# @dp.message_handler(commands=["start"])
# async def start(m: Message, dialog_manager: DialogManager):
#     await dialog_manager.start(MySG.main, mode=StartMode.RESET_STACK)


# if __name__ == '__main__':
#     executor.start_polling(dp, skip_updates=True)



#  report_data = {}
    
    
#     @dp.message_handler(Command('report'))
#     async def calculate_report(message: types.Message, state: FSMContext):
#         check = message.from_user.id  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         if check in config.usr_admins:
#             await bot.send_message(chat_id=INFO,
#                                    text=f'üîë –†–µ–ø–æ—Ä—Ç [{message.from_user.full_name, message.from_user.id}]')
    
    
#             cursor.execute("SELECT * FROM otchet")
#             conn.commit()
    
#             await message.answer(f"\n\nüìä –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –û–¢–ß–ï–¢–ê üìäÔ∏è")
#             try:
#                 await message.answer(f'\n\nüí∞ –í –∫–∞—Å—Å–µ –æ—Å—Ç–æ–≤–∞–ª–æ—Å—å : {cursor.fetchall()[-1][-3]} ‚ÇΩ')
#             except IndexError:
#                 await message.answer("ü™∂ –¢–ê–ë–õ–ò–¶–ê –ù–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ê ü™∂")
#                 await bot.send_message(chat_id=INFO, text='üõë –¢–ê–ë–õ–ò–¶–ê –ù–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ê!!!')
#                 pass
    
#             await message.answer( f'{tx.instr_1}' )
#             await fsm.Reports.R1.set()
    
#         else:
#             await message.answer('üë®üèΩ‚Äçüíª –í —Ä–∞–∑—Ä–∞–±–æ–∫–µ!')
    
    
#     @dp.message_handler(state=fsm.Reports.R1)
#     async def input_report(message: types.Message, state: FSMContext):
    
#         try:
#             money_in_the_morning = int(message.text)
    
#         except ValueError:
#             await message.answer(f'{tx.err_or_1}')
#             await message.answer(f'{tx.instr_1}')
#             return input_report
    
#         await state.update_data( money_in_the_morning=money_in_the_morning )
#         await message.answer( f'{tx.instr_2}' )
#         await fsm.Reports.R2.set()
    
    
#     @dp.message_handler( state=fsm.Reports.R2 )
#     async def input_report(message: types.Message, state: FSMContext):
    
#         try:
#             proceeds = int(message.text)
    
#         except ValueError:
#             await message.answer(f'{tx.err_or_1}')
#             await message.answer(f'{tx.instr_2}')
#             return input_report
    
#         await state.update_data(proceeds=proceeds)
#         await message.answer(f'{tx.instr_3}')
#         await fsm.Reports.R3.set()
    
    
#     @dp.message_handler( state=fsm.Reports.R3 )
#     async def input_report(message: types.Message, state: FSMContext):
    
#         try:
#             cashless = int(message.text)
    
#         except ValueError:
#             await message.answer(f'{tx.err_or_1}')
#             await message.answer( f'{tx.instr_3}' )
#             return input_report
    
#         await state.update_data(cashless=cashless)
#         await message.answer(f'{tx.instr_4}')
#         await fsm.Reports.R4.set()
    
    
#     @dp.message_handler( state=fsm.Reports.R4 )
#     async def input_report(message: types.Message, state: FSMContext):
    
#         try:
#             collection = int(message.text)
    
#         except ValueError:
#             await message.answer(f'{tx.err_or_1}')
#             await message.answer(f'{tx.instr_4}')
#             return input_report
    
#         await state.update_data(collection=collection)
#         await message.answer(f'{tx.instr_5}')
#         await fsm.Reports.R5.set()
    
    
#     @dp.message_handler( state=fsm.Reports.R5 )
#     async def input_report(message: types.Message, state: FSMContext):
    
#         try:
#             costs = int(message.text)
    
#         except ValueError:
#             await message.answer(f'{tx.err_or_1}')
#             await message.answer(f'{tx.instr_5}')
#             return input_report
    
#         await state.update_data(costs=costs)
#         await message.answer(f'{tx.instr_6}')
#         await fsm.Reports.R6.set()
    
    
#     @dp.message_handler( state=fsm.Reports.R6 )
#     async def input_report(message: types.Message, state: FSMContext):
#         try:
#             fact = int(message.text)
    
#         except ValueError:
#             await message.answer(f'{tx.err_or_1}')
#             await message.answer(f'{tx.instr_6}')
#             return input_report
    
#         await state.update_data(fact=fact)
#         report_data = await state.get_data()
    
    
#         async def start_report(report_data):
#             money_in_the_morning = int(report_data['money_in_the_morning'])
#             proceeds = int(report_data['proceeds'])
#             cashless = int(report_data['cashless'])
#             collection = int(report_data['collection'])
#             costs = int(report_data['costs'])
#             fact = int(report_data['fact'])
#             cash_1 = proceeds - cashless                                # –≤—ã—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ª–∏—á–∫—É
#             cash_2 = proceeds - cashless - collection - costs           # –û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ –∏–Ω–∫—Å –∏ –¥–æ–ø —Ä–∞—Å—Ö–æ–¥
#             kassa = money_in_the_morning + cash_2                       # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Å—Å—É
    
    
    
    
    
#     ####################################################################################################
    
#             form = f""" 
#     üóì {datetime.datetime.now().strftime("%d-%m-%Y %H:%M")}\n
#     üî∫        –û–¢–ß–ï–¢        üîª\n
#     ‚Ü¶ –í—ã—Ä—É—á–∫–∞: {proceeds} ‚ÇΩ
#     ‚Ü¶ –ë–µ–∑–Ω–∞–ª: {cashless} ‚ÇΩ
#     ‚Ü¶ –ù–∞–ª–∏—á–Ω—ã–º–∏: {cash_1} ‚ÇΩ
#     ‚Ü¶ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏–∏:{collection} ‚ÇΩ
#     ‚Ü¶ –î–æ–ø. —Ä–∞—Å—Ö–æ–¥—ã:{costs} ‚ÇΩ
#     ‚Ü¶ –§–∞–∫—Ç: {fact}‚ÇΩ
    
#             """
#     ####################################################################################################
    
    
    
#             # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–∞—Å—Å–µ
#             if fact == kassa:
    
#                 await message.answer(f'{form}\n–í –∫–∞—Å—Å–µ: {str( kassa )}‚ÇΩ\n–ö–∞—Å—Å–∞ —Ä–æ–≤–Ω–∞—è! „Ç∑ ')
    
#                 await bot.send_message(chat_id=INFO,
#                                        text=f'{form}\n–í –∫–∞—Å—Å–µ: {str( kassa )}‚ÇΩ\n'
#                                        f'–ö–∞—Å—Å–∞ —Ä–æ–≤–Ω–∞—è! „Ç∑ ')
    
    
#             elif fact > kassa:
    
#                 await message.answer(
#                     f'{form}\n–í –∫–∞—Å—Å–µ {str( fact )}‚ÇΩ '
#                     f'\n–î–æ–ª–∂–Ω–æ –±—ã—Ç—å {str( kassa )}‚ÇΩ\n'
#                     f'–°—É–º–º–∞ –±–æ–ª—å—à–µ –Ω–∞ {str( fact - kassa )}‚ÇΩ')
    
#                 await bot.send_message(chat_id=INFO,
#                                        text=f'{form}\n–í –∫–∞—Å—Å–µ {str( fact )}‚ÇΩ '
#                                        f'\n–î–æ–ª–∂–Ω–æ –±—ã—Ç—å {str( kassa )}‚ÇΩ\n–°—É–º–º–∞ '
#                                        f'–±–æ–ª—å—à–µ –Ω–∞ {str( fact - kassa )}‚ÇΩ')
    
    
    
#             else:
#                 await message.answer(
#                     f'{form}\n–í –∫–∞—Å—Å–µ {str( fact )}‚ÇΩ '
#                     f'\n–î–æ–ª–∂–Ω–æ –±—ã—Ç—å {str( kassa )}‚ÇΩ.\n'
#                     f'–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {str( kassa - fact )}‚ÇΩ')
    
    
    
#                 await bot.send_message(chat_id=INFO,
#                                        text = f'{form}\n–í –∫–∞—Å—Å–µ {str( fact )}‚ÇΩ '
#                                        f'\n–î–æ–ª–∂–Ω–æ –±—ã—Ç—å {str( kassa )}‚ÇΩ.\n'
#                                        f'–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {str( kassa - fact )}‚ÇΩ')
    
    
#             priz = 9000
#             difference = priz - proceeds
    
    
    
#             if proceeds >= priz:
#                 await message.answer('üèÜ –ü–†–ï–ú–ò–Ø ü•á:\n\n–£—Ä–∞–∞... '
#                                      '–í–∞–º –ø–æ–ª–æ–∂–µ–Ω–∞ –ø—Ä–µ–º–∏—è 500‚ÇΩ –∑–∞ '
#                                      '—Ö–æ—Ä–æ—à—É—é —Ä–∞–±–æ—Ç—É! üéäüéâüéà\n')
#                 await message.answer('ü§ë')
    
    
#             elif proceeds >= priz - 1000:
#                 await message.answer(f'ü•à –ü–†–ï–ú–ò–Ø ü•à:\n\nüöñ–í–∞–º –ø–æ–ª–æ–∂–µ–Ω–Ω–æ –¢–∞–∫—Å–∏ –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã! üöñ\n'
#                                      f'–î–æ üèÜ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ {str( difference )} ‚ÇΩ  ü§¨ üò≠\n')
    
# ==================================================================================================================

# from aiogram import Bot, types
# from aiogram.contrib.fsm_storage.memory import MemoryStorage
# from aiogram.dispatcher import Dispatcher, FSMContext
# from aiogram.dispatcher.filters.state import State, StatesGroup
# from aiogram.utils import executor
# from pyautogui import *
# from pyqiwip2p import QiwiP2P
# from pyqiwip2p.p2p_types import QiwiCustomer, QiwiDatetime
# import Qiwi_Token
# import random


# p2p = QiwiP2P(auth_key=Qiwi_Token.P2P_Qiwi_Token) #–¢–æ–∫–µ–Ω –ö–∏–≤–∏ –∫–æ—à–µ–ª—å–∫–∞

# file = "GTA5 game.jpg"
# bot = Bot(token="#####", parse_mode=types.ParseMode.HTML)
# storage = MemoryStorage()
# dp = Dispatcher(bot, storage=storage)



# class BuyState(StatesGroup):  #–ú–∞—à–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
#     Buy_CM = State()

# @dp.message_handler(commands=["start"])
# async def start_message(message: types.Message):
#     await message.answer("–ü—Ä–∏–≤–µ—Ç, –≤—ã –ø–æ–ø–∞–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω\n<b>Telegram Games</b>\n"
#         "–ì–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∏–≥—Ä—É GTA5 Online\n–Ω–∞–∂–∞–≤ –∫–æ–º–∞–Ω–¥—É <b>/buy</b> ")

# @dp.message_handler(commands=["help"])
# async def help_message(message: types.Message):
#     await message.answer("–ù–∞–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/buy</b>\n–ß—Ç–æ–±—É –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä")

# @dp.message_handler(commands=['buy'])
# async def cmd_buy(message: types.Message):
#     await BuyState.Buy_CM.set() #–ó–∞–ø—É—Å–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø–ª–∞—Ç—ã

#     new_bill = p2p.bill(bill_id=random.choice(range(100,99999999)), amount=150, lifetime=0.1)
#     print(new_bill.bill_id, new_bill.pay_url)


#     button1 = types.InlineKeyboardButton(text="–ö –æ–ø–ª–∞—Ç–µ   150,00 RUB", url=new_bill.pay_url)
#     button2 = types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="–û—Ç–º–µ–Ω–∏—Ç—å")
#     markup = types.InlineKeyboardMarkup(row_width=1)
#     markup.add(button1,button2)

    
#     file = "GTA5 game.jpg"
#     photo = types.InputFile(file)
#     await bot.send_photo(message.chat.id,photo=photo,caption=""
#         "<b>Epic Games –∞–∫–∫–∞—É–Ω—Ç —Å –∏–≥—Ä–æ–π GTA 5</b>\n"
#         "–ü–†–ï–î–û–°–¢–ê–í–õ–Ø–ï–°–¢–Ø —Å–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ + –î–æ—Å—Ç—É–ø –∫ –ø–æ—á—Ç–µ\n"
#         "–ë–∞–Ω–æ–≤ –≤ –æ–Ω–ª–∞–π–Ω–µ –Ω–µ—Ç\n"
#         "<u>100% –ì–∞—Ä–∞–Ω—Ç–∏–µ–π –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</u> (–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ)–∏–Ω—Ç–µ—Ä–µ—Å—É–π—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á—É.",
#         reply_markup=markup)

#     while True: #–°–æ–∑–¥–∞–Ω–∏–µ —Ü–∏–∫–ª–∞
#         #–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
#         if p2p.check(new_bill.bill_id).status == 'PAID': #–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞ —Ç–æ - –¥–æ—à–ª–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞ –¥–æ –±–æ—Ç–∞. –í—Å–ª—É—á–∞–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–π if.
#             await message.answer("544")
#             break #–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞
#         elif p2p.check(new_bill.bill_id).status == "EXPIRED": #–î–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω–∞ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã. –¢–æ –µ—Å—Ç—å –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–ø–ª–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ 7-–º–∏ –º–∏–Ω—É—Ç, —Ü–∏–∫–ª –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è.
#             await message.answer('–ú—É–∂–∏–∫, —Ç—ã —á–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª?')
#             break #–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞
#         if p2p.check(new_bill.bill_id).status == 'REJECTED': #–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞ —Ç–æ - –¥–æ—à–ª–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞ –¥–æ –±–æ—Ç–∞. –í—Å–ª—É—á–∞–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–π if.
#             break #–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞
#         sleep(5)
#     sleep(0.1) #–°–ø–∏–º –Ω–µ–∫–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∫—Ä–∞—à–Ω—É–ª—Å—è.

# @dp.callback_query_handler(text="–û—Ç–º–µ–Ω–∏—Ç—å", state=BuyState.Buy_CM)
# async def photo_update(call: types.CallbackQuery, state: FSMContext): #–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–¥
        
#     photo_update = types.InputMedia(media=types.InputFile(file), caption=""
#     "<b>Epic Games –∞–∫–∫–∞—É–Ω—Ç —Å –∏–≥—Ä–æ–π GTA 5</b>\n"
#     "–ü–†–ï–î–û–°–¢–ê–í–õ–Ø–ï–°–¢–Ø —Å–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ + –î–æ—Å—Ç—É–ø –∫ –ø–æ—á—Ç–µ\n"
#     "–ë–∞–Ω–æ–≤ –≤ –æ–Ω–ª–∞–π–Ω–µ –Ω–µ—Ç\n"
#     "<u>100% –ì–∞—Ä–∞–Ω—Ç–∏–µ–π –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</u> (–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ)–∏–Ω—Ç–µ—Ä–µ—Å—É–π—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á—É.")
            
#     await call.message.edit_media(photo_update)
#     await bot.send_message(call.from_user.id,'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑')
#     p2p.reject(bill_id=new_bill.bill_id)
#     await state.finish()


# if __name__ == "__main__":
#     executor.start_polling(dp, skip_updates=True)


# @router.message(Command(commands=["delete"]), state=None)
# async def cmd_delete(message: Message, state: FSMContext):
#     kb = []
#     kb.append([
#         InlineKeyboardButton(
#             text="–í—ã–±—Ä–∞—Ç—å —Å—Å—ã–ª–∫—É",
#             switch_inline_query_current_chat="links"
#         )
#     ])
#     kb.append([
#         InlineKeyboardButton(
#             text="–í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
#             switch_inline_query_current_chat="images"
#         )
#     ])
#     await state.set_state(DeleteCommon.waiting_for_delete_start)
#     await message.answer(
#         text="–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
#     )

# @router.inline_query(F.query == "long")
# async def pagination_demo(
#         inline_query: InlineQuery,
# ):
#     # –í—ã—Å—á–∏—Ç—ã–≤–∞–µ–º offset –∫–∞–∫ —á–∏—Å–ª–æ
#     offset = int(inline_query.offset) if inline_query.offset else 1
#     results = [InlineQueryResultArticle(
#         id=str(item_num),
#         title=f"–û–±—ä–µ–∫—Ç ‚Ññ{item_num}",
#         input_message_content=InputTextMessageContent(
#             message_text=f"–û–±—ä–µ–∫—Ç ‚Ññ{item_num}"
#         )
#     ) for item_num in get_fake_results(offset)]
#     if len(results) < 50:
#         await inline_query.answer(
#             results, is_personal=True
#         )
#     else:
#         await inline_query.answer(
#             results, is_personal=True, 
#             next_offset=str(offset+50)
#         )